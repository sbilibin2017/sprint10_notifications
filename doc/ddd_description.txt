DDD(Domain Driven Design) подразумевает под собой декомпозицию сервиса на отдельные независимые слои, реализующие коммуникацию с помощью Data Transfer object (DTO)

Сервис состоит из слоев:
1. domain - доменный слой: в нем описывается модель доменной области
модель доменной области состоит из:
    1.1. entity - сущность, вокруг которой строится модель (идентифицируется с помощью уникального идентифкатора)
    1.2. value_object - объект, который описывает entity; объект не изменяется и идентифицируется не идентификатором, а значением его атрибутов
    1.3. aggregates - связка entity и value_object для решения конкретной задачи (bounded context)
    1.4. interfaces - интерфейсы всех элементов, которыми пользуется доменная область (репозитории, сервисы, dto(data transfer object))
2. infrastructure - подключения к БД, репозитории для взаимодействия с БД, сервисы для реализации конкретной потребности бизнеса
    2.1. databases
    	2.1.1. db.py
    	2.1.2. cache.py
    2.2. dtos
    	2.2.1. pydantic_model.py
    2.3. repositories
    	...
    2.2. services
    	...
3. usecases - реализация интерфейса для доменных экспертов, с помощью которых решается конкретнаяпотребность (/api/v1/movies)
    

